plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version + "-" + project.minecraft_version
group = project.maven_group

minecraft {
}

test {
    useJUnitPlatform()
}

repositories {
    maven { url 'https://repo.repsy.io/mvn/gandiber/geckolib' }
    maven { url = "http://maven.fabricmc.net/" }
    maven {
        name = "Ladysnake Libs"
        url = "https://dl.bintray.com/ladysnake/libs"
    }
    mavenCentral()
    mavenLocal()
    maven { url "https://maven.shedaniel.me/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    testImplementation(
            'org.assertj:assertj-core:3.12.2',
            'org.junit.jupiter:junit-jupiter-api:5.4.2',
            'org.hamcrest:hamcrest-library:2.2'
    )
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.4.2')

    if(project.doBuild.toBoolean()) {
        modImplementation "net.barribob:maelstrom-library:${project.maelstrom_version}-${project.minecraft_version}"
        modImplementation "io.github.stuff_stuffs.multipart_entities:MultipartEntities:${project.multipart_version}"
    } else {
        implementation "net.barribob:maelstrom-library:${project.maelstrom_version}-${project.minecraft_version}"
        implementation "io.github.stuff_stuffs.multipart_entities:MultipartEntities:${project.multipart_version}"
    }

    include "net.barribob:maelstrom-library:${project.maelstrom_version}-${project.minecraft_version}"
    include "io.github.stuff_stuffs.multipart_entities:MultipartEntities:${project.multipart_version}"

    modImplementation "software.bernie.geckolib:geckolib-${project.geckolib_minecraft_version}:${project.geckolib_version}"

    modApi("me.sargunvohra.mcmods:autoconfig1u:${project.auto_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    include "me.sargunvohra.mcmods:autoconfig1u:${project.auto_config_version}"

    modApi "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cardinal_components_version}"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-world:${project.cardinal_components_version}"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${project.cardinal_components_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cardinal_components_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-world:${project.cardinal_components_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${project.cardinal_components_version}"

    modCompileOnly("io.github.prospector:modmenu:1.14.6+build.31") {
        exclude module: "fabric-api"
    }
    modRuntime("io.github.prospector:modmenu:1.14.6+build.31") {
        exclude module: "fabric-api"
    }
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

publishing.repositories {
    // mavenLocal()
}

compileKotlin.kotlinOptions.jvmTarget = "1.8"
compileTestKotlin.kotlinOptions.jvmTarget = "1.8"